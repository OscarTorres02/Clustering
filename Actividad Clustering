{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNePZPP8B2Z70vodLBH68bb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/OscarTorres02/Clustering/blob/main/Actividad%20Clustering\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "XzQLF3PQmI9t",
        "outputId": "bb869cab-eb92-4098-8de6-20eed9ae8dff"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              RHOB         GR      NPHI        PEF         DTC\n",
              "DEPTH_MD                                                      \n",
              "494.528   1.884186  80.200851       NaN  20.915468  161.131180\n",
              "494.680   1.889794  79.262886       NaN  19.383013  160.603470\n",
              "494.832   1.896523  74.821999       NaN  22.591518  160.173615\n",
              "494.984   1.891913  72.878922       NaN  32.191910  160.149429\n",
              "495.136   1.880034  71.729141       NaN  38.495632  160.128342\n",
              "...            ...        ...       ...        ...         ...\n",
              "3271.416  2.630211  19.418915  0.187811        NaN         NaN\n",
              "3271.568  2.643114  21.444370  0.185574        NaN         NaN\n",
              "3271.720  2.681300  22.646879  0.176074        NaN         NaN\n",
              "3271.872  2.738337  22.253584  0.174617        NaN         NaN\n",
              "3272.024  2.792922  19.829920  0.176627        NaN         NaN\n",
              "\n",
              "[18270 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-846ee51f-6756-45cc-92c1-a4b64daa6cd5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RHOB</th>\n",
              "      <th>GR</th>\n",
              "      <th>NPHI</th>\n",
              "      <th>PEF</th>\n",
              "      <th>DTC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEPTH_MD</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>494.528</th>\n",
              "      <td>1.884186</td>\n",
              "      <td>80.200851</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20.915468</td>\n",
              "      <td>161.131180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>494.680</th>\n",
              "      <td>1.889794</td>\n",
              "      <td>79.262886</td>\n",
              "      <td>NaN</td>\n",
              "      <td>19.383013</td>\n",
              "      <td>160.603470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>494.832</th>\n",
              "      <td>1.896523</td>\n",
              "      <td>74.821999</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.591518</td>\n",
              "      <td>160.173615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>494.984</th>\n",
              "      <td>1.891913</td>\n",
              "      <td>72.878922</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32.191910</td>\n",
              "      <td>160.149429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>495.136</th>\n",
              "      <td>1.880034</td>\n",
              "      <td>71.729141</td>\n",
              "      <td>NaN</td>\n",
              "      <td>38.495632</td>\n",
              "      <td>160.128342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3271.416</th>\n",
              "      <td>2.630211</td>\n",
              "      <td>19.418915</td>\n",
              "      <td>0.187811</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3271.568</th>\n",
              "      <td>2.643114</td>\n",
              "      <td>21.444370</td>\n",
              "      <td>0.185574</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3271.720</th>\n",
              "      <td>2.681300</td>\n",
              "      <td>22.646879</td>\n",
              "      <td>0.176074</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3271.872</th>\n",
              "      <td>2.738337</td>\n",
              "      <td>22.253584</td>\n",
              "      <td>0.174617</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3272.024</th>\n",
              "      <td>2.792922</td>\n",
              "      <td>19.829920</td>\n",
              "      <td>0.176627</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18270 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-846ee51f-6756-45cc-92c1-a4b64daa6cd5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-846ee51f-6756-45cc-92c1-a4b64daa6cd5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-846ee51f-6756-45cc-92c1-a4b64daa6cd5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6229a21e-b829-4356-abd0-a5a132bdc413\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6229a21e-b829-4356-abd0-a5a132bdc413')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6229a21e-b829-4356-abd0-a5a132bdc413 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e8d2a315-5665-42af-b017-34ecadcadb60\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e8d2a315-5665-42af-b017-34ecadcadb60 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 18270,\n  \"fields\": [\n    {\n      \"column\": \"DEPTH_MD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 801.94119517765,\n        \"min\": 494.528,\n        \"max\": 3272.024000000001,\n        \"num_unique_values\": 18270,\n        \"samples\": [\n          1115.296,\n          733.168,\n          1182.328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29772535983810045,\n        \"min\": 1.4045758247,\n        \"max\": 2.9278876781,\n        \"num_unique_values\": 18003,\n        \"samples\": [\n          2.0854625702000003,\n          2.108943224,\n          2.0189728737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.636330702970366,\n        \"min\": 6.191505909,\n        \"max\": 499.02258301,\n        \"num_unique_values\": 18254,\n        \"samples\": [\n          56.96032714800001,\n          25.682447433000004,\n          45.700019836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.133531915701009,\n        \"min\": 0.0243302025,\n        \"max\": 0.8002619743000001,\n        \"num_unique_values\": 14016,\n        \"samples\": [\n          0.5335391164,\n          0.4501361847,\n          0.3157360554\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.561238838557277,\n        \"min\": 1.0100272894,\n        \"max\": 66.030319214,\n        \"num_unique_values\": 16339,\n        \"samples\": [\n          4.4554796219,\n          1.7618055344,\n          2.241137743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.61833676092104,\n        \"min\": 55.726753235,\n        \"max\": 175.95314026,\n        \"num_unique_values\": 18037,\n        \"samples\": [\n          146.77700806,\n          142.53482056,\n          85.68611145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "# Importa la biblioteca pandas y la asigna al alias pd, utilizada para la manipulaciÃ³n y anÃ¡lisis de datos\n",
        "import pandas as pd\n",
        "\n",
        "# Importa el mÃ³dulo pyplot de matplotlib con el alias plt, utilizado para crear grÃ¡ficos\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Importa StandardScaler del mÃ³dulo preprocessing de sklearn, usado para estandarizar los datos (media 0 y desviaciÃ³n estÃ¡ndar 1)\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Importa la clase KMeans del mÃ³dulo cluster de sklearn, que permite realizar clustering no supervisado\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Carga un archivo CSV en un DataFrame llamado df, usando la columna 'DEPTH_MD' como Ã­ndice\n",
        "df = pd.read_csv('/content/force2020_data_unsupervised_learning.csv', index_col='DEPTH_MD')\n",
        "\n",
        "# Muestra el contenido del DataFrame df (funciona en entornos como Jupyter Notebook)\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Elimina todas las filas con valores NaN en el DataFrame df. El parÃ¡metro inplace=True\n",
        "# asegura que los cambios se realicen directamente en df, sin necesidad de crear una copia.\n",
        "df.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "IutxgrfAm5eR"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "Oou1gVkIm_cL",
        "outputId": "436e4fd6-a52c-449d-9c13-81d5a5f46b96"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              RHOB         GR      NPHI       PEF         DTC\n",
              "DEPTH_MD                                                     \n",
              "1138.704  1.774626  55.892757  0.765867  1.631495  147.837677\n",
              "1138.856  1.800986  60.929138  0.800262  1.645080  142.382431\n",
              "1139.008  1.817696  62.117264  0.765957  1.645873  138.258331\n",
              "1139.160  1.829333  61.010860  0.702521  1.620216  139.198914\n",
              "1139.312  1.813854  58.501236  0.639708  1.504854  144.290085\n",
              "...            ...        ...       ...       ...         ...\n",
              "2993.256  2.468236  90.537521  0.341534  4.699200   86.474564\n",
              "2993.408  2.457519  88.819122  0.351085  4.699200   86.187599\n",
              "2993.560  2.429228  92.128922  0.364982  4.699200   87.797836\n",
              "2993.712  2.425479  95.870255  0.367323  5.224292   88.108452\n",
              "2993.864  2.455546  96.814697  0.379080  6.049967   88.956207\n",
              "\n",
              "[12202 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c472b312-bb66-41f1-9340-d2c676ddcfb0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RHOB</th>\n",
              "      <th>GR</th>\n",
              "      <th>NPHI</th>\n",
              "      <th>PEF</th>\n",
              "      <th>DTC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEPTH_MD</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1138.704</th>\n",
              "      <td>1.774626</td>\n",
              "      <td>55.892757</td>\n",
              "      <td>0.765867</td>\n",
              "      <td>1.631495</td>\n",
              "      <td>147.837677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138.856</th>\n",
              "      <td>1.800986</td>\n",
              "      <td>60.929138</td>\n",
              "      <td>0.800262</td>\n",
              "      <td>1.645080</td>\n",
              "      <td>142.382431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.008</th>\n",
              "      <td>1.817696</td>\n",
              "      <td>62.117264</td>\n",
              "      <td>0.765957</td>\n",
              "      <td>1.645873</td>\n",
              "      <td>138.258331</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.160</th>\n",
              "      <td>1.829333</td>\n",
              "      <td>61.010860</td>\n",
              "      <td>0.702521</td>\n",
              "      <td>1.620216</td>\n",
              "      <td>139.198914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.312</th>\n",
              "      <td>1.813854</td>\n",
              "      <td>58.501236</td>\n",
              "      <td>0.639708</td>\n",
              "      <td>1.504854</td>\n",
              "      <td>144.290085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.256</th>\n",
              "      <td>2.468236</td>\n",
              "      <td>90.537521</td>\n",
              "      <td>0.341534</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.474564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.408</th>\n",
              "      <td>2.457519</td>\n",
              "      <td>88.819122</td>\n",
              "      <td>0.351085</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.187599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.560</th>\n",
              "      <td>2.429228</td>\n",
              "      <td>92.128922</td>\n",
              "      <td>0.364982</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>87.797836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.712</th>\n",
              "      <td>2.425479</td>\n",
              "      <td>95.870255</td>\n",
              "      <td>0.367323</td>\n",
              "      <td>5.224292</td>\n",
              "      <td>88.108452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.864</th>\n",
              "      <td>2.455546</td>\n",
              "      <td>96.814697</td>\n",
              "      <td>0.379080</td>\n",
              "      <td>6.049967</td>\n",
              "      <td>88.956207</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12202 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c472b312-bb66-41f1-9340-d2c676ddcfb0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c472b312-bb66-41f1-9340-d2c676ddcfb0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c472b312-bb66-41f1-9340-d2c676ddcfb0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ae570b09-a2df-4111-89f0-72bb0c9aabf6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae570b09-a2df-4111-89f0-72bb0c9aabf6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ae570b09-a2df-4111-89f0-72bb0c9aabf6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c61443b1-f1dd-4004-b8f5-05a7b04c5396\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c61443b1-f1dd-4004-b8f5-05a7b04c5396 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 12202,\n  \"fields\": [\n    {\n      \"column\": \"DEPTH_MD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 535.6918149228975,\n        \"min\": 1138.704,\n        \"max\": 2993.864,\n        \"num_unique_values\": 12202,\n        \"samples\": [\n          2018.024,\n          1376.128,\n          1449.696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2515923074976206,\n        \"min\": 1.4934167862,\n        \"max\": 2.8894536495,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          2.0860750675,\n          1.9473438263,\n          1.8546761274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.902707693446185,\n        \"min\": 6.191505909,\n        \"max\": 499.02258301,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          45.29385757399999,\n          87.715133667,\n          44.480037689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1392065142536423,\n        \"min\": 0.0379757099,\n        \"max\": 0.8002619743000001,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4802934527,\n          0.5588505268,\n          0.594176054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8169325797819709,\n        \"min\": 1.1266666651,\n        \"max\": 17.026618958,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          3.0824739933,\n          6.3486361504,\n          3.3218023777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.394368998529544,\n        \"min\": 55.726753235,\n        \"max\": 163.91079712,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          147.39859009,\n          88.96167755100002,\n          149.66241455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Genera estadÃ­sticas descriptivas del DataFrame df, como el conteo, la media,\n",
        "# la desviaciÃ³n estÃ¡ndar, los valores mÃ­nimo y mÃ¡ximo, y los percentiles para cada columna numÃ©rica.\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "HjkJDi52nBTB",
        "outputId": "428d6cb8-ec2a-4e2a-e2d1-5e0dc4a284af"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               RHOB            GR          NPHI           PEF           DTC\n",
              "count  12202.000000  12202.000000  12202.000000  12202.000000  12202.000000\n",
              "mean       2.149947     61.253852      0.414572      3.912313    121.409905\n",
              "std        0.251592     29.902708      0.139207      1.816933     30.394369\n",
              "min        1.493417      6.191506      0.037976      1.126667     55.726753\n",
              "25%        1.983767     42.792794      0.313797      2.629141     89.977041\n",
              "50%        2.059335     62.886322      0.466891      3.365132    138.477173\n",
              "75%        2.389839     77.726776      0.513840      4.686422    146.242302\n",
              "max        2.889454    499.022583      0.800262     17.026619    163.910797"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-129defc7-8640-470e-a79f-fb385a857a3f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RHOB</th>\n",
              "      <th>GR</th>\n",
              "      <th>NPHI</th>\n",
              "      <th>PEF</th>\n",
              "      <th>DTC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>12202.000000</td>\n",
              "      <td>12202.000000</td>\n",
              "      <td>12202.000000</td>\n",
              "      <td>12202.000000</td>\n",
              "      <td>12202.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.149947</td>\n",
              "      <td>61.253852</td>\n",
              "      <td>0.414572</td>\n",
              "      <td>3.912313</td>\n",
              "      <td>121.409905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.251592</td>\n",
              "      <td>29.902708</td>\n",
              "      <td>0.139207</td>\n",
              "      <td>1.816933</td>\n",
              "      <td>30.394369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.493417</td>\n",
              "      <td>6.191506</td>\n",
              "      <td>0.037976</td>\n",
              "      <td>1.126667</td>\n",
              "      <td>55.726753</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.983767</td>\n",
              "      <td>42.792794</td>\n",
              "      <td>0.313797</td>\n",
              "      <td>2.629141</td>\n",
              "      <td>89.977041</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.059335</td>\n",
              "      <td>62.886322</td>\n",
              "      <td>0.466891</td>\n",
              "      <td>3.365132</td>\n",
              "      <td>138.477173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2.389839</td>\n",
              "      <td>77.726776</td>\n",
              "      <td>0.513840</td>\n",
              "      <td>4.686422</td>\n",
              "      <td>146.242302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2.889454</td>\n",
              "      <td>499.022583</td>\n",
              "      <td>0.800262</td>\n",
              "      <td>17.026619</td>\n",
              "      <td>163.910797</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-129defc7-8640-470e-a79f-fb385a857a3f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-129defc7-8640-470e-a79f-fb385a857a3f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-129defc7-8640-470e-a79f-fb385a857a3f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-65a8e629-b706-404e-af0e-dd9daa7afccd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-65a8e629-b706-404e-af0e-dd9daa7afccd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-65a8e629-b706-404e-af0e-dd9daa7afccd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"RHOB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4313.390964441691,\n        \"min\": 0.2515923074976206,\n        \"max\": 12202.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.1499469722515983,\n          2.0593354701999997,\n          12202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4277.658307570664,\n        \"min\": 6.191505909,\n        \"max\": 12202.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          61.25385186152786,\n          62.8863220215,\n          12202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4313.9227873483105,\n        \"min\": 0.0379757099,\n        \"max\": 12202.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4145722233803721,\n          0.4668909907,\n          12202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4312.315735785495,\n        \"min\": 1.1266666651,\n        \"max\": 12202.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.912312828249516,\n          3.3651319742000005,\n          12202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4276.619379134056,\n        \"min\": 30.394368998529544,\n        \"max\": 12202.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          121.40990541535791,\n          138.47717285,\n          12202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importamos la clase StandardScaler del mÃ³dulo sklearn.preprocessing\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Aplicamos el escalado a las columnas 'RHOB', 'NPHI', 'GR', 'PEF' y 'DTC' del DataFrame df\n",
        "# El mÃ©todo fit_transform calcula la media y desviaciÃ³n estÃ¡ndar de cada columna,\n",
        "# y luego estandariza los datos, es decir, les da una media de 0 y una desviaciÃ³n estÃ¡ndar de 1\n",
        "df[['RHOB_T', 'NPHI_T', 'GR_T', 'PEF_T', 'DTC_T']] = scaler.fit_transform(df[['RHOB', 'NPHI', 'GR', 'PEF', 'DTC']])"
      ],
      "metadata": {
        "id": "ikt67-U0nERw"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "UmP8MSYZnGjb",
        "outputId": "2f34bfbb-672a-4472-ac1c-3f8b7989f0fc"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              RHOB         GR      NPHI       PEF         DTC    RHOB_T  \\\n",
              "DEPTH_MD                                                                  \n",
              "1138.704  1.774626  55.892757  0.765867  1.631495  147.837677 -1.491843   \n",
              "1138.856  1.800986  60.929138  0.800262  1.645080  142.382431 -1.387067   \n",
              "1139.008  1.817696  62.117264  0.765957  1.645873  138.258331 -1.320646   \n",
              "1139.160  1.829333  61.010860  0.702521  1.620216  139.198914 -1.274390   \n",
              "1139.312  1.813854  58.501236  0.639708  1.504854  144.290085 -1.335919   \n",
              "...            ...        ...       ...       ...         ...       ...   \n",
              "2993.256  2.468236  90.537521  0.341534  4.699200   86.474564  1.265151   \n",
              "2993.408  2.457519  88.819122  0.351085  4.699200   86.187599  1.222550   \n",
              "2993.560  2.429228  92.128922  0.364982  4.699200   87.797836  1.110101   \n",
              "2993.712  2.425479  95.870255  0.367323  5.224292   88.108452  1.095199   \n",
              "2993.864  2.455546  96.814697  0.379080  6.049967   88.956207  1.214709   \n",
              "\n",
              "            NPHI_T      GR_T     PEF_T     DTC_T  \n",
              "DEPTH_MD                                          \n",
              "1138.704  2.523654 -0.179292 -1.255364  0.869531  \n",
              "1138.856  2.770744 -0.010859 -1.247886  0.690042  \n",
              "1139.008  2.524300  0.028875 -1.247450  0.554350  \n",
              "1139.160  2.068584 -0.008126 -1.261572  0.585297  \n",
              "1139.312  1.617342 -0.092056 -1.325067  0.752808  \n",
              "...            ...       ...       ...       ...  \n",
              "2993.256 -0.524699  0.979338  0.433103 -1.149449  \n",
              "2993.408 -0.456081  0.921870  0.433103 -1.158891  \n",
              "2993.560 -0.356250  1.032560  0.433103 -1.105910  \n",
              "2993.712 -0.339430  1.157682  0.722114 -1.095690  \n",
              "2993.864 -0.254974  1.189267  1.176566 -1.067797  \n",
              "\n",
              "[12202 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e0e5f02-5c78-45ed-84fb-c4e8017d799b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RHOB</th>\n",
              "      <th>GR</th>\n",
              "      <th>NPHI</th>\n",
              "      <th>PEF</th>\n",
              "      <th>DTC</th>\n",
              "      <th>RHOB_T</th>\n",
              "      <th>NPHI_T</th>\n",
              "      <th>GR_T</th>\n",
              "      <th>PEF_T</th>\n",
              "      <th>DTC_T</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEPTH_MD</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1138.704</th>\n",
              "      <td>1.774626</td>\n",
              "      <td>55.892757</td>\n",
              "      <td>0.765867</td>\n",
              "      <td>1.631495</td>\n",
              "      <td>147.837677</td>\n",
              "      <td>-1.491843</td>\n",
              "      <td>2.523654</td>\n",
              "      <td>-0.179292</td>\n",
              "      <td>-1.255364</td>\n",
              "      <td>0.869531</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138.856</th>\n",
              "      <td>1.800986</td>\n",
              "      <td>60.929138</td>\n",
              "      <td>0.800262</td>\n",
              "      <td>1.645080</td>\n",
              "      <td>142.382431</td>\n",
              "      <td>-1.387067</td>\n",
              "      <td>2.770744</td>\n",
              "      <td>-0.010859</td>\n",
              "      <td>-1.247886</td>\n",
              "      <td>0.690042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.008</th>\n",
              "      <td>1.817696</td>\n",
              "      <td>62.117264</td>\n",
              "      <td>0.765957</td>\n",
              "      <td>1.645873</td>\n",
              "      <td>138.258331</td>\n",
              "      <td>-1.320646</td>\n",
              "      <td>2.524300</td>\n",
              "      <td>0.028875</td>\n",
              "      <td>-1.247450</td>\n",
              "      <td>0.554350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.160</th>\n",
              "      <td>1.829333</td>\n",
              "      <td>61.010860</td>\n",
              "      <td>0.702521</td>\n",
              "      <td>1.620216</td>\n",
              "      <td>139.198914</td>\n",
              "      <td>-1.274390</td>\n",
              "      <td>2.068584</td>\n",
              "      <td>-0.008126</td>\n",
              "      <td>-1.261572</td>\n",
              "      <td>0.585297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.312</th>\n",
              "      <td>1.813854</td>\n",
              "      <td>58.501236</td>\n",
              "      <td>0.639708</td>\n",
              "      <td>1.504854</td>\n",
              "      <td>144.290085</td>\n",
              "      <td>-1.335919</td>\n",
              "      <td>1.617342</td>\n",
              "      <td>-0.092056</td>\n",
              "      <td>-1.325067</td>\n",
              "      <td>0.752808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.256</th>\n",
              "      <td>2.468236</td>\n",
              "      <td>90.537521</td>\n",
              "      <td>0.341534</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.474564</td>\n",
              "      <td>1.265151</td>\n",
              "      <td>-0.524699</td>\n",
              "      <td>0.979338</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.149449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.408</th>\n",
              "      <td>2.457519</td>\n",
              "      <td>88.819122</td>\n",
              "      <td>0.351085</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.187599</td>\n",
              "      <td>1.222550</td>\n",
              "      <td>-0.456081</td>\n",
              "      <td>0.921870</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.158891</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.560</th>\n",
              "      <td>2.429228</td>\n",
              "      <td>92.128922</td>\n",
              "      <td>0.364982</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>87.797836</td>\n",
              "      <td>1.110101</td>\n",
              "      <td>-0.356250</td>\n",
              "      <td>1.032560</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.105910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.712</th>\n",
              "      <td>2.425479</td>\n",
              "      <td>95.870255</td>\n",
              "      <td>0.367323</td>\n",
              "      <td>5.224292</td>\n",
              "      <td>88.108452</td>\n",
              "      <td>1.095199</td>\n",
              "      <td>-0.339430</td>\n",
              "      <td>1.157682</td>\n",
              "      <td>0.722114</td>\n",
              "      <td>-1.095690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.864</th>\n",
              "      <td>2.455546</td>\n",
              "      <td>96.814697</td>\n",
              "      <td>0.379080</td>\n",
              "      <td>6.049967</td>\n",
              "      <td>88.956207</td>\n",
              "      <td>1.214709</td>\n",
              "      <td>-0.254974</td>\n",
              "      <td>1.189267</td>\n",
              "      <td>1.176566</td>\n",
              "      <td>-1.067797</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12202 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e0e5f02-5c78-45ed-84fb-c4e8017d799b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e0e5f02-5c78-45ed-84fb-c4e8017d799b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e0e5f02-5c78-45ed-84fb-c4e8017d799b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2842fbe7-abd3-4f9a-b602-42933b2a3360\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2842fbe7-abd3-4f9a-b602-42933b2a3360')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2842fbe7-abd3-4f9a-b602-42933b2a3360 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_74615703-d519-4c43-918b-fbcbd959cef5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_74615703-d519-4c43-918b-fbcbd959cef5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 12202,\n  \"fields\": [\n    {\n      \"column\": \"DEPTH_MD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 535.6918149228975,\n        \"min\": 1138.704,\n        \"max\": 2993.864,\n        \"num_unique_values\": 12202,\n        \"samples\": [\n          2018.024,\n          1376.128,\n          1449.696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2515923074976206,\n        \"min\": 1.4934167862,\n        \"max\": 2.8894536495,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          2.0860750675,\n          1.9473438263,\n          1.8546761274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.902707693446185,\n        \"min\": 6.191505909,\n        \"max\": 499.02258301,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          45.29385757399999,\n          87.715133667,\n          44.480037689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1392065142536423,\n        \"min\": 0.0379757099,\n        \"max\": 0.8002619743000001,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4802934527,\n          0.5588505268,\n          0.594176054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8169325797819709,\n        \"min\": 1.1266666651,\n        \"max\": 17.026618958,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          3.0824739933,\n          6.3486361504,\n          3.3218023777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.394368998529544,\n        \"min\": 55.726753235,\n        \"max\": 163.91079712,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          147.39859009,\n          88.96167755100002,\n          149.66241455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000040979407866,\n        \"min\": -2.6096071728110277,\n        \"max\": 2.9394260466454925,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          -0.2538810618644943,\n          -0.8053165477265921,\n          -1.1736564913804954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078624,\n        \"min\": -2.705418982737331,\n        \"max\": 2.7707435842726635,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4721325211615949,\n          1.0364760344201691,\n          1.2902498970055027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078657,\n        \"min\": -1.8414587380971272,\n        \"max\": 14.640368863579763,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          -0.5337526113777791,\n          0.8849488295313028,\n          -0.5609693184131544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078655,\n        \"min\": -1.5332216221331074,\n        \"max\": 7.21812338673789,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          -0.4567438827879788,\n          1.3409540829137214,\n          -0.32501737042382783\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078666,\n        \"min\": -2.1611188519892908,\n        \"max\": 1.398371960545527,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          0.8550843637125232,\n          -1.0676174121295943,\n          0.9295691220667895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creamos una funciÃ³n para calcular el nÃºmero Ã³ptimo de clusters\n",
        "def optimise_k_means(data, max_k):\n",
        "    means = []  # Lista para almacenar el nÃºmero de clusters (k)\n",
        "    inertias = []  # Lista para almacenar la inercia (suma de distancias cuadradas) para cada valor de k\n",
        "\n",
        "    # Iteramos sobre el rango de 1 a max_k-1 para probar diferentes nÃºmeros de clusters\n",
        "    for k in range(1, max_k):\n",
        "        kmeans = KMeans(n_clusters=k)  # Creamos el modelo K-means para k clusters\n",
        "        kmeans.fit(data)  # Entrenamos el modelo con los datos proporcionados\n",
        "\n",
        "        means.append(k)  # Guardamos el valor de k\n",
        "        inertias.append(kmeans.inertia_)  # Guardamos la inercia para ese nÃºmero de clusters\n",
        "\n",
        "    # Generamos el grÃ¡fico del codo\n",
        "    fig = plt.subplots(figsize=(10, 5))  # Creamos una figura con un tamaÃ±o especÃ­fico\n",
        "    plt.plot(means, inertias, 'o-')  # Graficamos la relaciÃ³n entre el nÃºmero de clusters y la inercia\n",
        "    plt.xlabel('Number of Clusters')  # Etiqueta del eje X\n",
        "    plt.ylabel('Inertia')  # Etiqueta del eje Y\n",
        "    plt.grid(True)  # Activamos la cuadrÃ­cula en el grÃ¡fico\n",
        "    plt.show()  # Mostramos el grÃ¡fico"
      ],
      "metadata": {
        "id": "GAEcyuL-nJK9"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Llamamos a la funciÃ³n para optimizar el nÃºmero de clusters con las columnas seleccionadas y un mÃ¡ximo de 10 clusters\n",
        "optimise_k_means(df[['RHOB_T', 'NPHI_T']], 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "NLobmXHAnN-q",
        "outputId": "f089a76d-09c4-4c37-ce44-06be8204ba57"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=3)  # Inicializamos el modelo K-means con 3 clusters"
      ],
      "metadata": {
        "id": "D-R_KQnYnPz0"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Entrenamos el modelo con las columnas 'NPHI_T' y 'RHOB_T' del DataFrame\n",
        "kmeans.fit(df[['NPHI_T', 'RHOB_T']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "ssrtUT4FnSMc",
        "outputId": "a3189f74-3d82-4ab2-8a81-88de84b3f3d7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=3)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KMeans<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(n_clusters=3)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Asignamos las etiquetas de los clusters a una nueva columna 'kmeans_3'\n",
        "df['kmeans_3'] = kmeans.labels_"
      ],
      "metadata": {
        "id": "x1H0OHa0nUdX"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "NUpvEY4dnWvb",
        "outputId": "2978dadd-33a3-4824-9b4c-e72f8b792866"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              RHOB         GR      NPHI       PEF         DTC    RHOB_T  \\\n",
              "DEPTH_MD                                                                  \n",
              "1138.704  1.774626  55.892757  0.765867  1.631495  147.837677 -1.491843   \n",
              "1138.856  1.800986  60.929138  0.800262  1.645080  142.382431 -1.387067   \n",
              "1139.008  1.817696  62.117264  0.765957  1.645873  138.258331 -1.320646   \n",
              "1139.160  1.829333  61.010860  0.702521  1.620216  139.198914 -1.274390   \n",
              "1139.312  1.813854  58.501236  0.639708  1.504854  144.290085 -1.335919   \n",
              "...            ...        ...       ...       ...         ...       ...   \n",
              "2993.256  2.468236  90.537521  0.341534  4.699200   86.474564  1.265151   \n",
              "2993.408  2.457519  88.819122  0.351085  4.699200   86.187599  1.222550   \n",
              "2993.560  2.429228  92.128922  0.364982  4.699200   87.797836  1.110101   \n",
              "2993.712  2.425479  95.870255  0.367323  5.224292   88.108452  1.095199   \n",
              "2993.864  2.455546  96.814697  0.379080  6.049967   88.956207  1.214709   \n",
              "\n",
              "            NPHI_T      GR_T     PEF_T     DTC_T  kmeans_3  \n",
              "DEPTH_MD                                                    \n",
              "1138.704  2.523654 -0.179292 -1.255364  0.869531         2  \n",
              "1138.856  2.770744 -0.010859 -1.247886  0.690042         2  \n",
              "1139.008  2.524300  0.028875 -1.247450  0.554350         2  \n",
              "1139.160  2.068584 -0.008126 -1.261572  0.585297         2  \n",
              "1139.312  1.617342 -0.092056 -1.325067  0.752808         2  \n",
              "...            ...       ...       ...       ...       ...  \n",
              "2993.256 -0.524699  0.979338  0.433103 -1.149449         1  \n",
              "2993.408 -0.456081  0.921870  0.433103 -1.158891         1  \n",
              "2993.560 -0.356250  1.032560  0.433103 -1.105910         1  \n",
              "2993.712 -0.339430  1.157682  0.722114 -1.095690         1  \n",
              "2993.864 -0.254974  1.189267  1.176566 -1.067797         1  \n",
              "\n",
              "[12202 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f1202a0-e24d-4022-92fd-32c8b7b0ec8c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RHOB</th>\n",
              "      <th>GR</th>\n",
              "      <th>NPHI</th>\n",
              "      <th>PEF</th>\n",
              "      <th>DTC</th>\n",
              "      <th>RHOB_T</th>\n",
              "      <th>NPHI_T</th>\n",
              "      <th>GR_T</th>\n",
              "      <th>PEF_T</th>\n",
              "      <th>DTC_T</th>\n",
              "      <th>kmeans_3</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEPTH_MD</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1138.704</th>\n",
              "      <td>1.774626</td>\n",
              "      <td>55.892757</td>\n",
              "      <td>0.765867</td>\n",
              "      <td>1.631495</td>\n",
              "      <td>147.837677</td>\n",
              "      <td>-1.491843</td>\n",
              "      <td>2.523654</td>\n",
              "      <td>-0.179292</td>\n",
              "      <td>-1.255364</td>\n",
              "      <td>0.869531</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138.856</th>\n",
              "      <td>1.800986</td>\n",
              "      <td>60.929138</td>\n",
              "      <td>0.800262</td>\n",
              "      <td>1.645080</td>\n",
              "      <td>142.382431</td>\n",
              "      <td>-1.387067</td>\n",
              "      <td>2.770744</td>\n",
              "      <td>-0.010859</td>\n",
              "      <td>-1.247886</td>\n",
              "      <td>0.690042</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.008</th>\n",
              "      <td>1.817696</td>\n",
              "      <td>62.117264</td>\n",
              "      <td>0.765957</td>\n",
              "      <td>1.645873</td>\n",
              "      <td>138.258331</td>\n",
              "      <td>-1.320646</td>\n",
              "      <td>2.524300</td>\n",
              "      <td>0.028875</td>\n",
              "      <td>-1.247450</td>\n",
              "      <td>0.554350</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.160</th>\n",
              "      <td>1.829333</td>\n",
              "      <td>61.010860</td>\n",
              "      <td>0.702521</td>\n",
              "      <td>1.620216</td>\n",
              "      <td>139.198914</td>\n",
              "      <td>-1.274390</td>\n",
              "      <td>2.068584</td>\n",
              "      <td>-0.008126</td>\n",
              "      <td>-1.261572</td>\n",
              "      <td>0.585297</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.312</th>\n",
              "      <td>1.813854</td>\n",
              "      <td>58.501236</td>\n",
              "      <td>0.639708</td>\n",
              "      <td>1.504854</td>\n",
              "      <td>144.290085</td>\n",
              "      <td>-1.335919</td>\n",
              "      <td>1.617342</td>\n",
              "      <td>-0.092056</td>\n",
              "      <td>-1.325067</td>\n",
              "      <td>0.752808</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.256</th>\n",
              "      <td>2.468236</td>\n",
              "      <td>90.537521</td>\n",
              "      <td>0.341534</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.474564</td>\n",
              "      <td>1.265151</td>\n",
              "      <td>-0.524699</td>\n",
              "      <td>0.979338</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.149449</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.408</th>\n",
              "      <td>2.457519</td>\n",
              "      <td>88.819122</td>\n",
              "      <td>0.351085</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.187599</td>\n",
              "      <td>1.222550</td>\n",
              "      <td>-0.456081</td>\n",
              "      <td>0.921870</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.158891</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.560</th>\n",
              "      <td>2.429228</td>\n",
              "      <td>92.128922</td>\n",
              "      <td>0.364982</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>87.797836</td>\n",
              "      <td>1.110101</td>\n",
              "      <td>-0.356250</td>\n",
              "      <td>1.032560</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.105910</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.712</th>\n",
              "      <td>2.425479</td>\n",
              "      <td>95.870255</td>\n",
              "      <td>0.367323</td>\n",
              "      <td>5.224292</td>\n",
              "      <td>88.108452</td>\n",
              "      <td>1.095199</td>\n",
              "      <td>-0.339430</td>\n",
              "      <td>1.157682</td>\n",
              "      <td>0.722114</td>\n",
              "      <td>-1.095690</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.864</th>\n",
              "      <td>2.455546</td>\n",
              "      <td>96.814697</td>\n",
              "      <td>0.379080</td>\n",
              "      <td>6.049967</td>\n",
              "      <td>88.956207</td>\n",
              "      <td>1.214709</td>\n",
              "      <td>-0.254974</td>\n",
              "      <td>1.189267</td>\n",
              "      <td>1.176566</td>\n",
              "      <td>-1.067797</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12202 rows Ã— 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f1202a0-e24d-4022-92fd-32c8b7b0ec8c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f1202a0-e24d-4022-92fd-32c8b7b0ec8c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f1202a0-e24d-4022-92fd-32c8b7b0ec8c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c832e247-912f-41da-83bc-a045146b5cc8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c832e247-912f-41da-83bc-a045146b5cc8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c832e247-912f-41da-83bc-a045146b5cc8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_57072e3b-1efd-4395-821e-d76e55eca4d6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_57072e3b-1efd-4395-821e-d76e55eca4d6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 12202,\n  \"fields\": [\n    {\n      \"column\": \"DEPTH_MD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 535.6918149228975,\n        \"min\": 1138.704,\n        \"max\": 2993.864,\n        \"num_unique_values\": 12202,\n        \"samples\": [\n          2018.024,\n          1376.128,\n          1449.696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2515923074976206,\n        \"min\": 1.4934167862,\n        \"max\": 2.8894536495,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          2.0860750675,\n          1.9473438263,\n          1.8546761274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.902707693446185,\n        \"min\": 6.191505909,\n        \"max\": 499.02258301,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          45.29385757399999,\n          87.715133667,\n          44.480037689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1392065142536423,\n        \"min\": 0.0379757099,\n        \"max\": 0.8002619743000001,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4802934527,\n          0.5588505268,\n          0.594176054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8169325797819709,\n        \"min\": 1.1266666651,\n        \"max\": 17.026618958,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          3.0824739933,\n          6.3486361504,\n          3.3218023777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.394368998529544,\n        \"min\": 55.726753235,\n        \"max\": 163.91079712,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          147.39859009,\n          88.96167755100002,\n          149.66241455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000040979407866,\n        \"min\": -2.6096071728110277,\n        \"max\": 2.9394260466454925,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          -0.2538810618644943,\n          -0.8053165477265921,\n          -1.1736564913804954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078624,\n        \"min\": -2.705418982737331,\n        \"max\": 2.7707435842726635,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4721325211615949,\n          1.0364760344201691,\n          1.2902498970055027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078657,\n        \"min\": -1.8414587380971272,\n        \"max\": 14.640368863579763,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          -0.5337526113777791,\n          0.8849488295313028,\n          -0.5609693184131544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078655,\n        \"min\": -1.5332216221331074,\n        \"max\": 7.21812338673789,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          -0.4567438827879788,\n          1.3409540829137214,\n          -0.32501737042382783\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078666,\n        \"min\": -2.1611188519892908,\n        \"max\": 1.398371960545527,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          0.8550843637125232,\n          -1.0676174121295943,\n          0.9295691220667895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kmeans_3\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear un grÃ¡fico de dispersiÃ³n con los valores de 'NPHI' en el eje X y 'RHOB' en el eje Y.\n",
        "# Los colores de los puntos estÃ¡n determinados por la columna 'kmeans_3', que contiene las etiquetas de los clusters.\n",
        "plt.scatter(x=df['NPHI'], y=df['RHOB'], c=df['kmeans_3'])\n",
        "\n",
        "# Ajustar los lÃ­mites del eje X para que los valores estÃ©n entre -0.1 y 1.\n",
        "# Esto se hace para enfocar el grÃ¡fico en un rango especÃ­fico de valores de 'NPHI'.\n",
        "plt.xlim(-0.1, 1)\n",
        "\n",
        "# Ajustar los lÃ­mites del eje Y para que los valores estÃ©n entre 3 y 1.5.\n",
        "# Esto se hace para enfocar el grÃ¡fico en un rango especÃ­fico de valores de 'RHOB'.\n",
        "plt.ylim(3, 1.5)\n",
        "\n",
        "# Mostrar el grÃ¡fico generado.\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "Bvvw4z6Mnapt",
        "outputId": "8d186ba4-e23b-4034-d97a-e1d9057fc182"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicia un bucle que itera sobre un rango de valores de k, de 1 a 5 (inclusive).\n",
        "for k in range(1, 6):\n",
        "\n",
        "    # Crea una nueva instancia del modelo KMeans con el nÃºmero de clusters definido por k.\n",
        "    kmeans = KMeans(n_clusters=k)\n",
        "\n",
        "    # Ajusta el modelo KMeans a los datos seleccionados, 'RHOB_T' y 'NPHI_T', del DataFrame df.\n",
        "    kmeans.fit(df[['RHOB_T', 'NPHI_T']])\n",
        "\n",
        "    # Asigna las etiquetas de los clusters generados (kmeans.labels_) a una nueva columna en df,\n",
        "    # con el nombre dinÃ¡mico 'KMeans_{k}', donde k es el nÃºmero de clusters utilizado.\n",
        "    df[f'KMeans_{k}'] = kmeans.labels_"
      ],
      "metadata": {
        "id": "Pcc8YLyLnfwJ"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "id": "6cRbZLLXnjll",
        "outputId": "1c87c842-d3eb-4409-f26c-9f5b4979c7f3"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              RHOB         GR      NPHI       PEF         DTC    RHOB_T  \\\n",
              "DEPTH_MD                                                                  \n",
              "1138.704  1.774626  55.892757  0.765867  1.631495  147.837677 -1.491843   \n",
              "1138.856  1.800986  60.929138  0.800262  1.645080  142.382431 -1.387067   \n",
              "1139.008  1.817696  62.117264  0.765957  1.645873  138.258331 -1.320646   \n",
              "1139.160  1.829333  61.010860  0.702521  1.620216  139.198914 -1.274390   \n",
              "1139.312  1.813854  58.501236  0.639708  1.504854  144.290085 -1.335919   \n",
              "...            ...        ...       ...       ...         ...       ...   \n",
              "2993.256  2.468236  90.537521  0.341534  4.699200   86.474564  1.265151   \n",
              "2993.408  2.457519  88.819122  0.351085  4.699200   86.187599  1.222550   \n",
              "2993.560  2.429228  92.128922  0.364982  4.699200   87.797836  1.110101   \n",
              "2993.712  2.425479  95.870255  0.367323  5.224292   88.108452  1.095199   \n",
              "2993.864  2.455546  96.814697  0.379080  6.049967   88.956207  1.214709   \n",
              "\n",
              "            NPHI_T      GR_T     PEF_T     DTC_T  kmeans_3  KMeans_1  \\\n",
              "DEPTH_MD                                                               \n",
              "1138.704  2.523654 -0.179292 -1.255364  0.869531         2         0   \n",
              "1138.856  2.770744 -0.010859 -1.247886  0.690042         2         0   \n",
              "1139.008  2.524300  0.028875 -1.247450  0.554350         2         0   \n",
              "1139.160  2.068584 -0.008126 -1.261572  0.585297         2         0   \n",
              "1139.312  1.617342 -0.092056 -1.325067  0.752808         2         0   \n",
              "...            ...       ...       ...       ...       ...       ...   \n",
              "2993.256 -0.524699  0.979338  0.433103 -1.149449         1         0   \n",
              "2993.408 -0.456081  0.921870  0.433103 -1.158891         1         0   \n",
              "2993.560 -0.356250  1.032560  0.433103 -1.105910         1         0   \n",
              "2993.712 -0.339430  1.157682  0.722114 -1.095690         1         0   \n",
              "2993.864 -0.254974  1.189267  1.176566 -1.067797         1         0   \n",
              "\n",
              "          KMeans_2  KMeans_3  KMeans_4  KMeans_5  \n",
              "DEPTH_MD                                          \n",
              "1138.704         0         1         3         2  \n",
              "1138.856         0         1         3         2  \n",
              "1139.008         0         1         3         2  \n",
              "1139.160         0         1         3         2  \n",
              "1139.312         0         1         3         2  \n",
              "...            ...       ...       ...       ...  \n",
              "2993.256         1         0         2         4  \n",
              "2993.408         1         0         2         4  \n",
              "2993.560         1         0         2         4  \n",
              "2993.712         1         0         2         4  \n",
              "2993.864         1         0         2         4  \n",
              "\n",
              "[12202 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c4da316-f551-4bfd-82fd-1442cc5160ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RHOB</th>\n",
              "      <th>GR</th>\n",
              "      <th>NPHI</th>\n",
              "      <th>PEF</th>\n",
              "      <th>DTC</th>\n",
              "      <th>RHOB_T</th>\n",
              "      <th>NPHI_T</th>\n",
              "      <th>GR_T</th>\n",
              "      <th>PEF_T</th>\n",
              "      <th>DTC_T</th>\n",
              "      <th>kmeans_3</th>\n",
              "      <th>KMeans_1</th>\n",
              "      <th>KMeans_2</th>\n",
              "      <th>KMeans_3</th>\n",
              "      <th>KMeans_4</th>\n",
              "      <th>KMeans_5</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEPTH_MD</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1138.704</th>\n",
              "      <td>1.774626</td>\n",
              "      <td>55.892757</td>\n",
              "      <td>0.765867</td>\n",
              "      <td>1.631495</td>\n",
              "      <td>147.837677</td>\n",
              "      <td>-1.491843</td>\n",
              "      <td>2.523654</td>\n",
              "      <td>-0.179292</td>\n",
              "      <td>-1.255364</td>\n",
              "      <td>0.869531</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138.856</th>\n",
              "      <td>1.800986</td>\n",
              "      <td>60.929138</td>\n",
              "      <td>0.800262</td>\n",
              "      <td>1.645080</td>\n",
              "      <td>142.382431</td>\n",
              "      <td>-1.387067</td>\n",
              "      <td>2.770744</td>\n",
              "      <td>-0.010859</td>\n",
              "      <td>-1.247886</td>\n",
              "      <td>0.690042</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.008</th>\n",
              "      <td>1.817696</td>\n",
              "      <td>62.117264</td>\n",
              "      <td>0.765957</td>\n",
              "      <td>1.645873</td>\n",
              "      <td>138.258331</td>\n",
              "      <td>-1.320646</td>\n",
              "      <td>2.524300</td>\n",
              "      <td>0.028875</td>\n",
              "      <td>-1.247450</td>\n",
              "      <td>0.554350</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.160</th>\n",
              "      <td>1.829333</td>\n",
              "      <td>61.010860</td>\n",
              "      <td>0.702521</td>\n",
              "      <td>1.620216</td>\n",
              "      <td>139.198914</td>\n",
              "      <td>-1.274390</td>\n",
              "      <td>2.068584</td>\n",
              "      <td>-0.008126</td>\n",
              "      <td>-1.261572</td>\n",
              "      <td>0.585297</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139.312</th>\n",
              "      <td>1.813854</td>\n",
              "      <td>58.501236</td>\n",
              "      <td>0.639708</td>\n",
              "      <td>1.504854</td>\n",
              "      <td>144.290085</td>\n",
              "      <td>-1.335919</td>\n",
              "      <td>1.617342</td>\n",
              "      <td>-0.092056</td>\n",
              "      <td>-1.325067</td>\n",
              "      <td>0.752808</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.256</th>\n",
              "      <td>2.468236</td>\n",
              "      <td>90.537521</td>\n",
              "      <td>0.341534</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.474564</td>\n",
              "      <td>1.265151</td>\n",
              "      <td>-0.524699</td>\n",
              "      <td>0.979338</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.149449</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.408</th>\n",
              "      <td>2.457519</td>\n",
              "      <td>88.819122</td>\n",
              "      <td>0.351085</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>86.187599</td>\n",
              "      <td>1.222550</td>\n",
              "      <td>-0.456081</td>\n",
              "      <td>0.921870</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.158891</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.560</th>\n",
              "      <td>2.429228</td>\n",
              "      <td>92.128922</td>\n",
              "      <td>0.364982</td>\n",
              "      <td>4.699200</td>\n",
              "      <td>87.797836</td>\n",
              "      <td>1.110101</td>\n",
              "      <td>-0.356250</td>\n",
              "      <td>1.032560</td>\n",
              "      <td>0.433103</td>\n",
              "      <td>-1.105910</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.712</th>\n",
              "      <td>2.425479</td>\n",
              "      <td>95.870255</td>\n",
              "      <td>0.367323</td>\n",
              "      <td>5.224292</td>\n",
              "      <td>88.108452</td>\n",
              "      <td>1.095199</td>\n",
              "      <td>-0.339430</td>\n",
              "      <td>1.157682</td>\n",
              "      <td>0.722114</td>\n",
              "      <td>-1.095690</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2993.864</th>\n",
              "      <td>2.455546</td>\n",
              "      <td>96.814697</td>\n",
              "      <td>0.379080</td>\n",
              "      <td>6.049967</td>\n",
              "      <td>88.956207</td>\n",
              "      <td>1.214709</td>\n",
              "      <td>-0.254974</td>\n",
              "      <td>1.189267</td>\n",
              "      <td>1.176566</td>\n",
              "      <td>-1.067797</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12202 rows Ã— 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c4da316-f551-4bfd-82fd-1442cc5160ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c4da316-f551-4bfd-82fd-1442cc5160ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c4da316-f551-4bfd-82fd-1442cc5160ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-95f0c06b-c931-4dbd-9164-e168c4a4bdf2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95f0c06b-c931-4dbd-9164-e168c4a4bdf2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-95f0c06b-c931-4dbd-9164-e168c4a4bdf2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bd0f819e-a7b8-4a93-9b48-c0f8c6607dc1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bd0f819e-a7b8-4a93-9b48-c0f8c6607dc1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 12202,\n  \"fields\": [\n    {\n      \"column\": \"DEPTH_MD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 535.6918149228975,\n        \"min\": 1138.704,\n        \"max\": 2993.864,\n        \"num_unique_values\": 12202,\n        \"samples\": [\n          2018.024,\n          1376.128,\n          1449.696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2515923074976206,\n        \"min\": 1.4934167862,\n        \"max\": 2.8894536495,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          2.0860750675,\n          1.9473438263,\n          1.8546761274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.902707693446185,\n        \"min\": 6.191505909,\n        \"max\": 499.02258301,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          45.29385757399999,\n          87.715133667,\n          44.480037689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1392065142536423,\n        \"min\": 0.0379757099,\n        \"max\": 0.8002619743000001,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4802934527,\n          0.5588505268,\n          0.594176054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8169325797819709,\n        \"min\": 1.1266666651,\n        \"max\": 17.026618958,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          3.0824739933,\n          6.3486361504,\n          3.3218023777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.394368998529544,\n        \"min\": 55.726753235,\n        \"max\": 163.91079712,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          147.39859009,\n          88.96167755100002,\n          149.66241455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RHOB_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000040979407866,\n        \"min\": -2.6096071728110277,\n        \"max\": 2.9394260466454925,\n        \"num_unique_values\": 12120,\n        \"samples\": [\n          -0.2538810618644943,\n          -0.8053165477265921,\n          -1.1736564913804954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NPHI_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078624,\n        \"min\": -2.705418982737331,\n        \"max\": 2.7707435842726635,\n        \"num_unique_values\": 12187,\n        \"samples\": [\n          0.4721325211615949,\n          1.0364760344201691,\n          1.2902498970055027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GR_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078657,\n        \"min\": -1.8414587380971272,\n        \"max\": 14.640368863579763,\n        \"num_unique_values\": 12195,\n        \"samples\": [\n          -0.5337526113777791,\n          0.8849488295313028,\n          -0.5609693184131544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PEF_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078655,\n        \"min\": -1.5332216221331074,\n        \"max\": 7.21812338673789,\n        \"num_unique_values\": 12192,\n        \"samples\": [\n          -0.4567438827879788,\n          1.3409540829137214,\n          -0.32501737042382783\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTC_T\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000409794078666,\n        \"min\": -2.1611188519892908,\n        \"max\": 1.398371960545527,\n        \"num_unique_values\": 12151,\n        \"samples\": [\n          0.8550843637125232,\n          -1.0676174121295943,\n          0.9295691220667895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kmeans_3\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KMeans_1\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KMeans_2\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KMeans_3\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KMeans_4\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"KMeans_5\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Crea una figura con 1 fila y 5 columnas de subgrÃ¡ficos (axs), cada uno de tamaÃ±o 20x5\n",
        "fig, axs = plt.subplots(nrows=1, ncols=5, figsize=(20,5))\n",
        "\n",
        "# Inicia un bucle que itera sobre los subgrÃ¡ficos de la figura, asignando un nÃºmero de clusters para cada uno.\n",
        "for i, ax in enumerate(fig.axes, start=1):\n",
        "\n",
        "    # Crea un grÃ¡fico de dispersiÃ³n en el subgrÃ¡fico actual (ax), usando 'NPHI' en el eje X y 'RHOB' en el eje Y.\n",
        "    # Los colores de los puntos se determinan por las etiquetas del cluster (KMeans_{i}).\n",
        "    ax.scatter(x=df['NPHI'], y=df['RHOB'], c=df[f'KMeans_{i}'])\n",
        "\n",
        "    # Ajusta los lÃ­mites del eje Y para que los valores estÃ©n entre 3 y 1.5 (invirtiendo el eje Y).\n",
        "    ax.set_ylim(3, 1.5)\n",
        "\n",
        "    # Ajusta los lÃ­mites del eje X para que los valores estÃ©n entre 0 y 1.\n",
        "    ax.set_xlim(0, 1)\n",
        "\n",
        "    # Asigna un tÃ­tulo a cada subgrÃ¡fico que indica cuÃ¡ntos clusters se usaron.\n",
        "    ax.set_title(f'N Clusters: {i}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "S8QqLweznntF",
        "outputId": "34dddc43-29dd-498d-f20a-d8fe24a1617b"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}